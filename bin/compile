#!/usr/bin/env bash

# Exit immediately if a command exits with a non-zero status
set -e

# Load utility functions
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)
source $BP_DIR/lib/utils.sh

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

# Export all environment variables
export_env_dir "$ENV_DIR"

echo "-----> Installing DreamFactory"

# Note: System packages are handled by Heroku PHP buildpack
# We're expecting the PHP buildpack to run first
echo "-----> Ensuring PHP buildpack dependencies"

# Clear build directory and clone the repository fresh
echo "-----> Cloning DreamFactory repository"
# Save any existing environment files
if [ -f "$BUILD_DIR/.env" ]; then
  cp "$BUILD_DIR/.env" /tmp/.env.backup
fi

# Clone the repository into a temporary directory and then copy files
TMP_DIR=$(mktemp -d)
git clone https://github.com/dreamfactorysoftware/dreamfactory.git $TMP_DIR
# Copy everything from the temp directory to build directory
cp -R $TMP_DIR/* $BUILD_DIR/
cp -R $TMP_DIR/.[!.]* $BUILD_DIR/ 2>/dev/null || true

# Restore the environment file if it existed
if [ -f "/tmp/.env.backup" ]; then
  cp "/tmp/.env.backup" "$BUILD_DIR/.env"
  rm /tmp/.env.backup
fi

cd $BUILD_DIR

# Install composer dependencies
echo "-----> Installing Composer dependencies"
composer install --no-dev --ignore-platform-reqs --no-interaction

# Set up environment
echo "-----> Setting up DreamFactory environment"
if [ -f "$BUILD_DIR/artisan" ]; then
  php artisan df:env --db_connection=sqlite --df_install=Heroku
else
  echo "Warning: artisan file not found. Skipping DreamFactory environment setup."
  # Create basic .env file if it doesn't exist
  if [ ! -f "$BUILD_DIR/.env" ]; then
    echo "APP_ENV=production" > "$BUILD_DIR/.env"
    echo "APP_DEBUG=false" >> "$BUILD_DIR/.env"
    echo "DB_CONNECTION=sqlite" >> "$BUILD_DIR/.env"
  fi
fi

# Set appropriate permissions
echo "-----> Setting file permissions"
if [ -d "$BUILD_DIR/storage" ]; then
  chmod -R 755 $BUILD_DIR/storage
else
  echo "Warning: storage directory not found. Creating it..."
  mkdir -p $BUILD_DIR/storage/logs
  mkdir -p $BUILD_DIR/storage/app
  mkdir -p $BUILD_DIR/storage/framework/{cache,sessions,views}
  chmod -R 755 $BUILD_DIR/storage
fi

if [ -d "$BUILD_DIR/bootstrap/cache" ]; then
  chmod -R 755 $BUILD_DIR/bootstrap/cache
else
  echo "Warning: bootstrap/cache directory not found. Creating it..."
  mkdir -p $BUILD_DIR/bootstrap/cache
  chmod -R 755 $BUILD_DIR/bootstrap/cache
fi

# Set up NGINX configuration
echo "-----> Setting up NGINX"
mkdir -p $BUILD_DIR/nginx
cat > $BUILD_DIR/nginx/nginx.conf << 'EOF'
worker_processes auto;
daemon off;

events {
  worker_connections 1024;
}

http {
  include /etc/nginx/mime.types;
  default_type application/octet-stream;
  server_tokens off;
  client_max_body_size 100m;
  
  server {
    listen ${PORT};
    server_name _;

    root /app/public;
    index index.php;

    location / {
      try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
      fastcgi_pass 127.0.0.1:9000;
      fastcgi_index index.php;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
      include fastcgi_params;
    }
  }
}
EOF

# Create Procfile if it doesn't exist
echo "-----> Creating Procfile"
cat > $BUILD_DIR/Procfile << 'EOF'
web: sh -c "php-fpm -y /app/.heroku/php/etc/php-fpm.conf && nginx -p /app -c /app/nginx/nginx.conf"
EOF

echo "-----> DreamFactory installation complete"